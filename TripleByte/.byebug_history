c
j
seq[0..j]
curr_seq[(curr_seq.length-j-1)..-1]
step
c
seq[0..j]
curr_seq[(curr_seq.length-j-1)..-1]
curr_seq.length-j-1
jcurr_seq.length-j-1
j
seq[0..j]
curr_seq[(j*-1)..-1]
curr_seq
step
state
c
next
el
state_machine[state].call(el)
el
state_machine[state]
state
c
print i
i
state_machine
seq[0...i]
curr_seq
state
c
curr_seq
print i
i
state
c
curr_seq
step
seq[0...state] + el
c
curr_seq = seq[0...state] + el
curr_seq
found_match
seq[0...state] + el
curr_seq
curr_Seq
state
c
"asdf"[4]
curr_seq
seq[0...state] + el
el
seq[0...state]
curr_seq
seq
se
curr_seq
step
state
c
seq[0...(state-j)]
seq
curr_seq
seq[0...(state-j)]
curr_seq[j..-1]
curr_snippet
step
state
c
curr_snippet
reset_state
step
state
c
state
c
seq[state]
state
curr_seq
c
state
el
curr_seq
c
el
curr_seq
c
state
curr_seq
c
curr_snippet
seq
seq[0...(state-j)]
curr_seq[j..-1]
curr_seq[j-1..-1]
seq[0...(state-j)]
state
j
seq[0...(state-j+1)]
curr_seq[j-1..-1]
el
curr_seq
curr_sequence
curr_snippet
j
step
s
c
state
el
curr_seq
n
state_machine[state].call(el)
state_machine[state]
state
el
c
el
c
el
c
el
seq_snippet
curr_snippet
c
n
seq_snippet
curr_snippet
c
seq[0...(state-j+1)]
curr_seq[j-1..-1]
seq
curr_seq
j
seq_snippet
curr_snippet
c
n
state_machine[state].call(el)
n
c
n
genome
el
c
cc
c
seq_snippet
curr_snippet
c
reset_state
seq[state]
el
c
state_machine[state].call(el)
state_machine[state] el
state_machine[state](el)
state_machine[state]
state_machine
state
